INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 4728
INFO:__main__:  Num Epochs = 120
INFO:__main__:  Instantaneous batch size per device = 1
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 8
INFO:__main__:  Gradient Accumulation steps = 8
INFO:__main__:  Total optimization steps = 70920
Steps:   0%|                                                                                                                        | 0/70920 [00:00<?, ?it/s]/fs/nexus-scratch/sjxu/miniconda3/envs/svd_control/lib/python3.9/site-packages/torch/utils/data/dataloader.py:557: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 1, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
latents: torch.Size([1, 6, 4, 32, 64])
conditional_latents: torch.Size([1, 6, 4, 32, 64])
time steps: tensor([-0.3045], device='cuda:0')
before controlnet: torch.Size([1, 6, 8, 32, 64]) torch.Size([1]) torch.Size([1, 1, 1024]) torch.Size([1, 3]) torch.Size([1, 6, 4, 256, 512]) torch.Size([1, 6, 1, 16])
1 6
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 640, 8, 16])
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 320, 16, 32])
torch.Size([6, 1, 1024])
torch.Size([6, 640, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
latents: torch.Size([1, 6, 4, 32, 64])
conditional_latents: torch.Size([1, 6, 4, 32, 64])
time steps: tensor([0.4440], device='cuda:0')
before controlnet: torch.Size([1, 6, 8, 32, 64]) torch.Size([1]) torch.Size([1, 1, 1024]) torch.Size([1, 3]) torch.Size([1, 6, 4, 256, 512]) torch.Size([1, 6, 1, 16])
1 6
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 640, 8, 16])
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 320, 16, 32])
torch.Size([6, 1, 1024])
torch.Size([6, 640, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
Steps:   0%|                                                                                            | 0/70920 [00:14<?, ?it/s, lr=0.0001, step_loss=0.194]
latents: torch.Size([1, 6, 4, 32, 64])
conditional_latents: torch.Size([1, 6, 4, 32, 64])
time steps: tensor([0.2151], device='cuda:0')
before controlnet: torch.Size([1, 6, 8, 32, 64]) torch.Size([1]) torch.Size([1, 1, 1024]) torch.Size([1, 3]) torch.Size([1, 6, 4, 256, 512]) torch.Size([1, 6, 1, 16])
1 6
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 640, 8, 16])
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 320, 16, 32])
torch.Size([6, 1, 1024])
torch.Size([6, 640, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
latents: torch.Size([1, 6, 4, 32, 64])
conditional_latents: torch.Size([1, 6, 4, 32, 64])
time steps: tensor([0.2692], device='cuda:0')
before controlnet: torch.Size([1, 6, 8, 32, 64]) torch.Size([1]) torch.Size([1, 1, 1024]) torch.Size([1, 3]) torch.Size([1, 6, 4, 256, 512]) torch.Size([1, 6, 1, 16])
1 6
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 640, 8, 16])
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 16, 32]) torch.Size([6, 640, 16, 32])

torch.Size([6, 640, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 320, 16, 32])
torch.Size([6, 1, 1024])
torch.Size([6, 640, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
latents: torch.Size([1, 6, 4, 32, 64])
conditional_latents: torch.Size([1, 6, 4, 32, 64])
time steps: tensor([1.0685], device='cuda:0')
before controlnet: torch.Size([1, 6, 8, 32, 64]) torch.Size([1]) torch.Size([1, 1, 1024]) torch.Size([1, 3]) torch.Size([1, 6, 4, 256, 512]) torch.Size([1, 6, 1, 16])
1 6
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 640, 8, 16])
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 320, 16, 32])
torch.Size([6, 1, 1024])
torch.Size([6, 640, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
latents: torch.Size([1, 6, 4, 32, 64])
conditional_latents: torch.Size([1, 6, 4, 32, 64])
time steps: tensor([-0.0875], device='cuda:0')
before controlnet: torch.Size([1, 6, 8, 32, 64]) torch.Size([1]) torch.Size([1, 1, 1024]) torch.Size([1, 3]) torch.Size([1, 6, 4, 256, 512]) torch.Size([1, 6, 1, 16])

Steps:   0%|                                                                                            | 0/70920 [00:17<?, ?it/s, lr=0.0001, step_loss=0.184]
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 640, 8, 16])
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 320, 16, 32])
torch.Size([6, 1, 1024])
torch.Size([6, 640, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
latents: torch.Size([1, 6, 4, 32, 64])
conditional_latents: torch.Size([1, 6, 4, 32, 64])
time steps: tensor([-0.1929], device='cuda:0')
before controlnet: torch.Size([1, 6, 8, 32, 64]) torch.Size([1]) torch.Size([1, 1, 1024]) torch.Size([1, 3]) torch.Size([1, 6, 4, 256, 512]) torch.Size([1, 6, 1, 16])
1 6
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 640, 8, 16])
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 320, 16, 32])
torch.Size([6, 1, 1024])
torch.Size([6, 640, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])

Steps:   0%|                                                                                            | 0/70920 [00:20<?, ?it/s, lr=0.0001, step_loss=0.244]
latents: torch.Size([1, 6, 4, 32, 64])
conditional_latents: torch.Size([1, 6, 4, 32, 64])
time steps: tensor([-0.2847], device='cuda:0')
before controlnet: torch.Size([1, 6, 8, 32, 64]) torch.Size([1]) torch.Size([1, 1, 1024]) torch.Size([1, 3]) torch.Size([1, 6, 4, 256, 512]) torch.Size([1, 6, 1, 16])
1 6
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 1280, 8, 16])
torch.Size([6, 1280, 8, 16]) torch.Size([6, 640, 8, 16])
torch.Size([6, 1, 1024])
torch.Size([6, 1280, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 640, 16, 32])
torch.Size([6, 640, 16, 32]) torch.Size([6, 320, 16, 32])
torch.Size([6, 1, 1024])
torch.Size([6, 640, 32, 64]) torch.Size([6, 320, 32, 64])
torch.Size([6, 320, 32, 64]) torch.Size([6, 320, 32, 64])
Steps:   0%|                                                                                | 1/70920 [00:22<438:58:29, 22.28s/it, lr=0.0001, step_loss=0.244]INFO:__main__:Running validation...
 Generating 1 videos.
{'multi_frame', 'insert_light', 'controlnet'} was not found in config. Values will be initialized to default values.
                                                                                                                                                              {'final_sigmas_type', 'rescale_betas_zero_snr'} was not found in config. Values will be initialized to default values.
Loaded scheduler as EulerDiscreteScheduler from `scheduler` subfolder of stabilityai/stable-video-diffusion-img2vid.                    | 0/5 [00:00<?, ?it/s]
Loaded feature_extractor as CLIPImageProcessor from `feature_extractor` subfolder of stabilityai/stable-video-diffusion-img2vid.
Loading pipeline components...: 100%|██████████████████████████████████████████████████████████████████████████████████████████| 5/5 [00:00<00:00, 183.26it/s]
Traceback (most recent call last):
  File "/fs/nexus-scratch/sjxu/svd-temporal-controlnet/train_svd_controlnet.py", line 2000, in <module>
    main()
  File "/fs/nexus-scratch/sjxu/svd-temporal-controlnet/train_svd_controlnet.py", line 1882, in main
    video_frames = pipeline(
  File "/fs/nexus-scratch/sjxu/miniconda3/envs/svd_control/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 116, in decorate_context
    return func(*args, **kwargs)
  File "/fs/nexus-scratch/sjxu/svd-temporal-controlnet/pipeline/pipeline_stable_video_diffusion_controlnet.py", line 578, in __call__
    latent_model_input = torch.cat([latent_model_input, image_latents], dim=2)
RuntimeError: Sizes of tensors must match except in dimension 2. Expected size 2 but got size 12 for tensor number 1 in the list.
256 512
multi_frame  torch.Size([12, 1, 1024])
loaded: torch.Size([6, 3, 256, 512])
torch.Size([2, 6, 4, 32, 64]) torch.Size([12, 6, 4, 32, 64])