INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 319940
INFO:__main__:  Num Epochs = 30
INFO:__main__:  Instantaneous batch size per device = 2
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 16
INFO:__main__:  Gradient Accumulation steps = 8
INFO:__main__:  Total optimization steps = 599910
Steps:   0%|                                                                                                                                         | 0/599910 [00:00<?, ?it/s]
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)

Steps:   0%|                                                                                                                  | 0/599910 [00:03<?, ?it/s, loss=0.103, lr=0.0001]
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)

Steps:   0%|                                                                                                                  | 0/599910 [00:05<?, ?it/s, loss=0.104, lr=0.0001]
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)

Steps:   0%|                                                                                                                  | 0/599910 [00:08<?, ?it/s, loss=0.135, lr=0.0001]
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)

Steps:   0%|                                                                                                    | 1/599910 [00:09<1621:03:01,  9.73s/it, loss=0.0981, lr=0.0001]
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)

Steps:   0%|                                                                                                     | 1/599910 [00:11<1621:03:01,  9.73s/it, loss=0.102, lr=0.0001]
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)

Steps:   0%|                                                                                                     | 1/599910 [00:13<1621:03:01,  9.73s/it, loss=0.106, lr=0.0001]
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)

Steps:   0%|                                                                                                     | 1/599910 [00:15<1621:03:01,  9.73s/it, loss=0.118, lr=0.0001]
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)

Steps:   0%|                                                                                                    | 1/599910 [00:18<1621:03:01,  9.73s/it, loss=0.0966, lr=0.0001]
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)

Steps:   0%|                                                                                                    | 2/599910 [00:19<1546:30:11,  9.28s/it, loss=0.0935, lr=0.0001]
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)

Steps:   0%|                                                                                                     | 2/599910 [00:21<1546:30:11,  9.28s/it, loss=0.103, lr=0.0001]
tensor(-0.9375, device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-0.9844, device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(0.7969, device='cuda:0', dtype=torch.bfloat16)

Steps:   0%|                                                                                                     | 2/599910 [00:23<1546:30:11,  9.28s/it, loss=0.107, lr=0.0001]
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
Steps:   0%|                                                                                                     | 2/599910 [00:24<1546:30:11,  9.28s/it, loss=0.115, lr=0.0001]Traceback (most recent call last):
  File "/fs/nexus-scratch/sjxu/svd-temporal-controlnet/train_svd_decoder.py", line 1670, in <module>
    main()
  File "/fs/nexus-scratch/sjxu/svd-temporal-controlnet/train_svd_decoder.py", line 1655, in main
    logs = {"loss": loss.detach().item(), "lr": lr_scheduler.get_last_lr()[0]}
KeyboardInterrupt
Traceback (most recent call last):
  File "/fs/nexus-scratch/sjxu/miniconda3/envs/svd_control/lib/python3.9/multiprocessing/queues.py", line 251, in _feed
    send_bytes(obj)
  File "/fs/nexus-scratch/sjxu/miniconda3/envs/svd_control/lib/python3.9/multiprocessing/connection.py", line 205, in send_bytes
    self._send_bytes(m[offset:offset + size])
  File "/fs/nexus-scratch/sjxu/miniconda3/envs/svd_control/lib/python3.9/multiprocessing/connection.py", line 416, in _send_bytes
    self._send(header + buf)
  File "/fs/nexus-scratch/sjxu/miniconda3/envs/svd_control/lib/python3.9/multiprocessing/connection.py", line 373, in _send
    n = write(self._handle, buf)
BrokenPipeError: [Errno 32] Broken pipe
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)
tensor(-1., device='cuda:0', dtype=torch.bfloat16) tensor(1., device='cuda:0', dtype=torch.bfloat16)